#!/usr/bin/env python

"""SpankBang Service Code"""

####################################################################################################
def MetadataObjectForURL(url):

    Log.Debug('*' * 80)
    Log.Debug(u'* MetadataObjectForURL   = {}'.format(url))

    html = HTML.ElementFromURL(url)
    time_stamp = int(Datetime.TimestampFromDatetime(Datetime.Now()))
    title = html.xpath('//h1/text()')[0].strip()

    for node in html.xpath('//section[@class="details"]'):
        duration = Datetime.MillisecondsFromString(node.xpath('.//div[@class="right_side"]/span')[0].text_content().strip())
        summary_node = node.xpath('.//p/text()')
        if len(summary_node) > 1:
            summary = summary_node[1].strip()
            if summary == 'Category:':
                summary = None
        else:
            summary = None
        genres = node.xpath('.//a[contains(@href, "/category/")]/text()')

    thumb = html.xpath('//meta[@property="og:image"]/@content')[0]
    art = '/:/plugins/com.plexapp.plugins.spankbang/resources/art-default.jpg?t=%s' %time_stamp

    Log.Debug(u'* title                 = {}'.format(title))
    Log.Debug(u'* duration              = {}'.format(duration))
    Log.Debug(u'* genres                = {}'.format(genres))
    Log.Debug(u'* summary               = {}'.format(summary))
    Log.Debug('*' * 80)

    return VideoClipObject(
        title=title,
        summary=summary,
        duration=duration,
        genres=genres,
        content_rating='X',
        thumb=thumb,
        art=art,
        source_title='SpankBang'
        )

####################################################################################################
def MediaObjectsForURL(url):

    Log.Debug(u'* MediaObjectsForURL    = {}'.format(url))

    html = HTML.ElementFromURL(url)

    fmt_list = list()
    mo = list()
    bit_dict = {'4k': 3000, '1080p': 1800, '720p': 1200, '480p': 750, '320p': 450, '240p': 120}
    res_dict = {'4k': '4k', '1080p': '1080p', '720p': '720p', '480p': '480p', '320p': '320p', '240p': '240p'}

    for fmt_text in html.xpath('//ul/li[text()="Quality:"]/following-sibling::li[starts-with(@class, "q_")]/@class'):
        fmt_list.append(fmt_text.replace('q_', '').strip())

    if not fmt_list:
        fmt_list.append('medium')

    for fmt in fmt_list:
        mo.append(MediaObject(
            parts=[PartObject(key=Callback(PlayVideo, url=url, fmt=res_dict[fmt]))],
            video_resolution=res_dict[fmt][:-1] if res_dict[fmt] != '4k' else '2160',
            bitrate=bit_dict[fmt],
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True
            ))

    return mo

####################################################################################################
def PlayVideo(url, fmt, **kwargs):
    """Format the video url depending of format"""

    page = HTTP.Request(url).content

    if (fmt == '2160'):
        fmt = '4k'

    #rkey = Regex(r'var\s*?stream\_key\s*?\=\s*?[\'\"]([^\'\"\;]+)[\'\"]').search(page)
    #rid = Regex(r'var\s*?stream\_id\s*?\=\s*?[\'\"]([^\'\"\;]+)[\'\"]').search(page)
    videoURL = Regex(r'var\s*?stream\_url\_{}\s*?\=\s*?[\'\"]([^\'\"\;]+)[\'\"]'.format(fmt)).search(page)

    if videoURL:
        Log.Debug('* PlayVideo URL          = {}'.format(videoURL.group(1)))
        return Redirect(videoURL.group(1))

    #if rkey and rid:
        #video_url = 'http://spankbang.com/_{}/{}/title/{}__mp4'.format(rid.group(1), rkey.group(1), fmt)
        #Log.Debug('* PlayVideo URL          = {}'.format(video_url))
        #return Redirect(video_url)

    raise Ex.MediaNotAvailable
